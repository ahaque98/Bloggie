@using Microsoft.AspNetCore.Identity;
@inject SignInManager<IdentityUser> signInManager;
@inject UserManager<IdentityUser> userManager;
@model BlogDetailsViewModel;

@{
    ViewData["Title"] = Model.PageTitle;
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">
            @if (Model != null)
            {
                <h1 class="mb-3"> @Model.Heading</h1>
                <div class="mb-3">
                    @if (signInManager.IsSignedIn(User))
                    {
                        <a id="btnLike" style="cursor:pointer">
                            <i class="bi bi-hand-thumbs-up"></i>
                        </a>                        
                    }
                    <span id="totalLikes"> @Model.TotalLikes </span> Likes
                </div>

                <div class="d-flex mb-3 justify-content-between">
                    <span class="text-secondary">@Model.Author</span>
                    <span class="text-secondary">@Model.PublishedDate.ToShortDateString()</span>
                </div>

                <img src="@Model.FeaturedImageUrl" class="d-block img-fluid mb-3" />

                <div class="mb-3 d-flex">
                    @foreach (var tags in Model.Tags)
                    {
                        <span class="badge bg-secondary me-1">@tags.Name</span>
                    }
                </div>

                <div class="mb-3  ">
                    @Html.Raw(Model.Content)
                </div>
            }
            else
            {
                <h1 class="mb-3">BlogPost NotFound</h1>
            }
        </div>
    </div>
</div>

@section Scripts {   

    <script>

        const btnLikeElement = document.getElementById("btnLike");
        const totalLikeElement = document.getElementById("totalLikes");

        if (btnLikeElement && totalLikeElement) {
            async function getTotalLikes(){
                try {
                    const response = await fetch('/api/BlogPostLike/@Model.Id/totalLikes', {
                        method: "GET",
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': '*/*'
                        }
                    });
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    const result = await response.json();
                    totalLikeElement.innerHTML = result;
                } catch (error) {
                    console.error('Error fetching total likes:', error);
                }
            }

            async function AddLikeForBlog() {
                try {
                    const response = await fetch("/api/BlogPostLike/Add", {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': '*/*'
                        },
                        body: JSON.stringify({
                            blogPostId: '@Model.Id',
                            userId: '@userManager.GetUserId(User)'
                        })
                    });
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';
                    btnLikeElement.removeEventListener('click', AddLikeForBlog);
                    getTotalLikes();
                } catch (error) {
                    console.error('Error adding like:', error);
                }
            }

            btnLikeElement.addEventListener('click', AddLikeForBlog);
        }

    </script>
}